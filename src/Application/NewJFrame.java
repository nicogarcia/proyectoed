/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on 24/05/2010, 02:34:32
 */
package Application;

import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.geom.Dimension2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import Excepciones.BoundaryViolationException;
import Excepciones.EmptyListException;
import Excepciones.EmptyStackException;
import Excepciones.EmptyTreeException;
import Excepciones.InvalidLevelException;
import Excepciones.InvalidPositionException;
import GeneralTree.Arbol;
import GeneralTree.TNode;
import TDALista.Lista;
import TDALista.Position;
import TDALista.PositionList;
import TDAPila.Pila;
import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;
import org.w3c.dom.events.MouseEvent;

/**
 * 
 * @author nico
 */
public class NewJFrame extends javax.swing.JFrame {

	/** Creates new form NewJFrame */
	public NewJFrame() {
		try {
			background = ImageIO.read(getClass().getResource(
					"/images/fondo_gris.jpg"));
			background2 = ImageIO.read(getClass().getResource(
			"/images/black.jpg"));
			initComponents();
			green = ImageIO.read(getClass().getResource(
					"/images/green_node.png"));
			black = ImageIO.read(getClass().getResource(
					"/images/black_glossy_small.png"));
			flecha = ImageIO.read(getClass().getResource(
					"/images/flecha_small.png"));
			yellow = ImageIO.read(getClass().getResource(
					"/images/yellow_node.png"));
			blue = ImageIO
					.read(getClass().getResource("/images/blue_node.png"));
			orange = ImageIO.read(getClass().getResource(
					"/images/orange_node.png"));
			gray = ImageIO
					.read(getClass().getResource("/images/gray_node.png"));
			red = ImageIO.read(getClass().getResource("/images/red_node.png"));

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {


		clickDerecho = new javax.swing.JPopupMenu();
		ctxAddSon = new javax.swing.JMenuItem();
		ctxDeleteNode = new javax.swing.JMenuItem();
		panelDeFondo = new javax.swing.JPanel() {
			public void paint(Graphics e) {
				e.drawImage(background, 0, 0, null);
				setOpaque(false);
				super.paint(e);
			}
		};
		panelOperaciones = new javax.swing.JPanel();
		btnLoadTree = new javax.swing.JButton();
		panelAdd = new javax.swing.JPanel();
		btnAddNode = new javax.swing.JButton();
		cbPadres = new javax.swing.JComboBox();
		txtRotulo = new javax.swing.JTextField();
		lblRotulo = new javax.swing.JLabel();
		lblPadre = new javax.swing.JLabel();
		panelEliminar = new javax.swing.JPanel();
		btnDeleteLevel = new javax.swing.JButton();
		cbNiveles = new javax.swing.JComboBox();
		lblNivel = new javax.swing.JLabel();
		panelAncCam = new javax.swing.JPanel();
		cbDesde = new javax.swing.JComboBox();
		cbHasta = new javax.swing.JComboBox();
		lblDesde = new javax.swing.JLabel();
		lblHasta = new javax.swing.JLabel();
		panelMostrarAC = new javax.swing.JPanel();
		chkCamino = new javax.swing.JCheckBox();
		chkAncestro = new javax.swing.JCheckBox();
		btnEliminarArbol = new javax.swing.JButton();
		jPanel10 = new javax.swing.JPanel();
		cbAltura = new javax.swing.JComboBox();
		jLabel6 = new javax.swing.JLabel();
		lblAltura = new javax.swing.JLabel();
		panelGraficos = new javax.swing.JPanel();
		panelRecorridos = new javax.swing.JPanel();
		panelTipoRecorrido = new javax.swing.JPanel();
		radioPre = new javax.swing.JRadioButton();
		radioPos = new javax.swing.JRadioButton();
		scrollRecorrido = new javax.swing.JScrollPane();
		mpdRecorrido = new javax.swing.JPanel() {
			public void paint(Graphics e) {
				Graphics2D g = (Graphics2D) e;
				
				g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
						RenderingHints.VALUE_ANTIALIAS_ON);
				graficarRecorrido((Graphics2D) e);
			}
		};
		panelArbol = new javax.swing.JPanel();
		scrollArbol = new javax.swing.JScrollPane();
		mpdArbol = new javax.swing.JPanel() {
			public void paint(Graphics e) {
				Graphics2D g = (Graphics2D) e;
				
				g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
						RenderingHints.VALUE_ANTIALIAS_ON);
				if (radioNiveles.isSelected())
					graficarNiveles((Graphics2D) e);
				else
					graficarArbol((Graphics2D) e);
			}
		};
		radioNiveles = new javax.swing.JRadioButton();
		radioArbol = new javax.swing.JRadioButton();

        clickDerecho = new javax.swing.JPopupMenu();
        ctxAddSon = new javax.swing.JMenuItem();
        ctxDeleteNode = new javax.swing.JMenuItem();
        panelDeFondo = new javax.swing.JPanel() {
            public void paint(Graphics e) {
                e.drawImage(background, 0, 0, null);
                setOpaque(false);
                super.paint(e);
            }
        };
        panelOperaciones = new javax.swing.JPanel();
        btnLoadTree = new javax.swing.JButton();
        panelAdd = new javax.swing.JPanel();
        btnAddNode = new javax.swing.JButton();
        cbPadres = new javax.swing.JComboBox();
        txtRotulo = new javax.swing.JTextField();
        lblRotulo = new javax.swing.JLabel();
        lblPadre = new javax.swing.JLabel();
        panelEliminar = new javax.swing.JPanel();
        btnDeleteLevel = new javax.swing.JButton();
        cbNiveles = new javax.swing.JComboBox();
        lblNivel = new javax.swing.JLabel();
        panelAncCam = new javax.swing.JPanel();
        cbDesde = new javax.swing.JComboBox();
        cbHasta = new javax.swing.JComboBox();
        lblDesde = new javax.swing.JLabel();
        lblHasta = new javax.swing.JLabel();
        panelMostrarAC = new javax.swing.JPanel();
        chkCamino = new javax.swing.JCheckBox();
        chkAncestro = new javax.swing.JCheckBox();
        btnEliminarArbol = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        cbAltura = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        lblAltura = new javax.swing.JLabel();
        panelGraficos = new javax.swing.JPanel();
        panelRecorridos = new javax.swing.JPanel();
        panelTipoRecorrido = new javax.swing.JPanel();
        radioPre = new javax.swing.JRadioButton();
        radioPos = new javax.swing.JRadioButton();
        scrollRecorrido = new javax.swing.JScrollPane();
        mpdRecorrido = new javax.swing.JPanel() {
            public void paint(Graphics e) {
                Graphics2D g = (Graphics2D) e;
                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
                graficarRecorrido((Graphics2D) e);
            }
        };
        panelArbol = new javax.swing.JPanel();
        scrollArbol = new javax.swing.JScrollPane();
        mpdArbol = new javax.swing.JPanel() {
            public void paintComponent(Graphics e) {
                super.paintComponent(e);
                Graphics2D g = (Graphics2D) e;
                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
                if (radioNiveles.isSelected())
                graficarNiveles((Graphics2D) e);
                else
                graficarArbol((Graphics2D) e);
            }
        };
        radioNiveles = new javax.swing.JRadioButton();
        radioArbol = new javax.swing.JRadioButton();


        ctxAddSon.setText("Agregar hijo");
        ctxAddSon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctxAddSonActionPerformed(evt);
            }
        });
        clickDerecho.add(ctxAddSon);

        ctxDeleteNode.setText("Borrar nodo");
        ctxDeleteNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctxDeleteNodeActionPerformed(evt);
            }
        });
        clickDerecho.add(ctxDeleteNode);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelDeFondo.setOpaque(false);

        panelOperaciones.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        panelOperaciones.setOpaque(false);

        btnLoadTree.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        btnLoadTree.setText("Cargar Arbol");
        btnLoadTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadTreeActionPerformed(evt);
            }
        });

        panelAdd.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Agregar Nodo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        panelAdd.setOpaque(false);
        panelAdd.setPreferredSize(new java.awt.Dimension(17, 153));

        btnAddNode.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        btnAddNode.setText("Agregar");
        btnAddNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNodeActionPerformed(evt);
            }
        });

        cbPadres.setOpaque(false);

        txtRotulo.setOpaque(false);

        lblRotulo.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        lblRotulo.setText("Rotulo");

        lblPadre.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        lblPadre.setText("Padre");

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddNode, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRotulo)
                            .addComponent(lblPadre))
                        .addGap(85, 85, 85)
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtRotulo, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(cbPadres, 0, 60, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRotulo)
                    .addComponent(txtRotulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPadre)
                    .addComponent(cbPadres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAddNode)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        panelEliminar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Eliminar Nivel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        panelEliminar.setOpaque(false);
        panelEliminar.setPreferredSize(new java.awt.Dimension(174, 98));

        btnDeleteLevel.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        btnDeleteLevel.setText("Eliminar");
        btnDeleteLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteLevelActionPerformed(evt);
            }
        });

        cbNiveles.setOpaque(false);

        lblNivel.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        lblNivel.setText("Nivel");

        javax.swing.GroupLayout panelEliminarLayout = new javax.swing.GroupLayout(panelEliminar);
        panelEliminar.setLayout(panelEliminarLayout);
        panelEliminarLayout.setHorizontalGroup(
            panelEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEliminarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDeleteLevel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addGroup(panelEliminarLayout.createSequentialGroup()
                        .addComponent(lblNivel, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addGap(26, 26, 26)
                        .addComponent(cbNiveles, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelEliminarLayout.setVerticalGroup(
            panelEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEliminarLayout.createSequentialGroup()
                .addGroup(panelEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbNiveles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNivel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteLevel, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelAncCam.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ancestro - Camino", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        panelAncCam.setOpaque(false);

        cbDesde.setOpaque(false);

        cbHasta.setOpaque(false);

        lblDesde.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        lblDesde.setText("Desde");

        lblHasta.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        lblHasta.setText("Hasta");

        panelMostrarAC.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mostrar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N
        panelMostrarAC.setOpaque(false);

        chkCamino.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        chkCamino.setText("Camino");
        chkCamino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCaminoActionPerformed(evt);
            }
        });

        chkAncestro.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        chkAncestro.setText("Ancestro Comun");
        chkAncestro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAncestroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMostrarACLayout = new javax.swing.GroupLayout(panelMostrarAC);
        panelMostrarAC.setLayout(panelMostrarACLayout);
        panelMostrarACLayout.setHorizontalGroup(
            panelMostrarACLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMostrarACLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMostrarACLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chkCamino)
                    .addComponent(chkAncestro, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        panelMostrarACLayout.setVerticalGroup(
            panelMostrarACLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMostrarACLayout.createSequentialGroup()
                .addComponent(chkAncestro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkCamino))
        );

        javax.swing.GroupLayout panelAncCamLayout = new javax.swing.GroupLayout(panelAncCam);
        panelAncCam.setLayout(panelAncCamLayout);
        panelAncCamLayout.setHorizontalGroup(
            panelAncCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAncCamLayout.createSequentialGroup()
                .addGroup(panelAncCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAncCamLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelAncCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDesde)
                            .addComponent(lblHasta))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                        .addGroup(panelAncCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbHasta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbDesde, 0, 53, Short.MAX_VALUE)))
                    .addComponent(panelMostrarAC, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelAncCamLayout.setVerticalGroup(
            panelAncCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAncCamLayout.createSequentialGroup()
                .addGroup(panelAncCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDesde)
                    .addComponent(cbDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAncCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHasta)
                    .addComponent(cbHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelMostrarAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnEliminarArbol.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        btnEliminarArbol.setText("Eliminar Arbol");

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mostrar altura", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        jPanel10.setMaximumSize(new java.awt.Dimension(100, 32767));
        jPanel10.setOpaque(false);

        cbAltura.setOpaque(false);
        cbAltura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAlturaActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        jLabel6.setText("Rotulo");

        lblAltura.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAltura.setText("Altura: ");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAltura, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addComponent(cbAltura, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(cbAltura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(lblAltura, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelOperacionesLayout = new javax.swing.GroupLayout(panelOperaciones);
        panelOperaciones.setLayout(panelOperacionesLayout);
        panelOperacionesLayout.setHorizontalGroup(
            panelOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOperacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEliminarArbol, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(btnLoadTree, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(panelAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(panelEliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(panelAncCam, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelOperacionesLayout.setVerticalGroup(
            panelOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOperacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLoadTree, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminarArbol, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAncCam, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelGraficos.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        panelGraficos.setOpaque(false);

        panelRecorridos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grafico de recorrido", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        panelRecorridos.setOpaque(false);

        panelTipoRecorrido.setOpaque(false);

        radioPre.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        radioPre.setSelected(true);
        radioPre.setText("Pre-orden");
        radioPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPreActionPerformed(evt);
            }
        });

        radioPos.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        radioPos.setText("Pos-orden");
        radioPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTipoRecorridoLayout = new javax.swing.GroupLayout(panelTipoRecorrido);
        panelTipoRecorrido.setLayout(panelTipoRecorridoLayout);
        panelTipoRecorridoLayout.setHorizontalGroup(
            panelTipoRecorridoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTipoRecorridoLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(radioPre)
                .addContainerGap())
            .addGroup(panelTipoRecorridoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioPos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTipoRecorridoLayout.setVerticalGroup(
            panelTipoRecorridoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTipoRecorridoLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(radioPre, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioPos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        scrollRecorrido.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        scrollRecorrido.setOpaque(false);

        mpdRecorrido.setOpaque(false);

        javax.swing.GroupLayout mpdRecorridoLayout = new javax.swing.GroupLayout(mpdRecorrido);
        mpdRecorrido.setLayout(mpdRecorridoLayout);
        mpdRecorridoLayout.setHorizontalGroup(
            mpdRecorridoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
        );
        mpdRecorridoLayout.setVerticalGroup(
            mpdRecorridoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        scrollRecorrido.setViewportView(mpdRecorrido);

        javax.swing.GroupLayout panelRecorridosLayout = new javax.swing.GroupLayout(panelRecorridos);
        panelRecorridos.setLayout(panelRecorridosLayout);
        panelRecorridosLayout.setHorizontalGroup(
            panelRecorridosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRecorridosLayout.createSequentialGroup()
                .addComponent(panelTipoRecorrido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollRecorrido, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelRecorridosLayout.setVerticalGroup(
            panelRecorridosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRecorridosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRecorridosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(panelTipoRecorrido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollRecorrido, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelArbol.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grafico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        panelArbol.setOpaque(false);

        scrollArbol.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollArbol.setAutoscrolls(true);
        scrollArbol.setOpaque(false);

        mpdArbol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mpdArbolMouseClicked(evt);
            }
        });
        mpdArbol.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mpdArbolMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout mpdArbolLayout = new javax.swing.GroupLayout(mpdArbol);
        mpdArbol.setLayout(mpdArbolLayout);
        mpdArbolLayout.setHorizontalGroup(
            mpdArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 685, Short.MAX_VALUE)
        );
        mpdArbolLayout.setVerticalGroup(
            mpdArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );

        scrollArbol.setViewportView(mpdArbol);

        radioNiveles.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        radioNiveles.setText("Mostrar Niveles");
        radioNiveles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioNivelesActionPerformed(evt);
            }
        });

        radioArbol.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        radioArbol.setSelected(true);
        radioArbol.setText("Mostrar Arbol");
        radioArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioArbolActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelArbolLayout = new javax.swing.GroupLayout(panelArbol);
        panelArbol.setLayout(panelArbolLayout);
        panelArbolLayout.setHorizontalGroup(
            panelArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelArbolLayout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(radioArbol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(radioNiveles, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addGap(226, 226, 226))
            .addGroup(panelArbolLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollArbol, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelArbolLayout.setVerticalGroup(
            panelArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelArbolLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollArbol, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioArbol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(radioNiveles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelGraficosLayout = new javax.swing.GroupLayout(panelGraficos);
        panelGraficos.setLayout(panelGraficosLayout);
        panelGraficosLayout.setHorizontalGroup(
            panelGraficosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGraficosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelArbol, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRecorridos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelGraficosLayout.setVerticalGroup(
            panelGraficosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelArbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelRecorridos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelDeFondoLayout = new javax.swing.GroupLayout(panelDeFondo);
        panelDeFondo.setLayout(panelDeFondoLayout);
        panelDeFondoLayout.setHorizontalGroup(
            panelDeFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelGraficos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelDeFondoLayout.setVerticalGroup(
            panelDeFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDeFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelGraficos, javax.swing.GroupLayout.Alignment.LEADING, 0, 685, Short.MAX_VALUE)
                    .addComponent(panelOperaciones, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelDeFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelDeFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void mpdArbolMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_mpdArbolMouseClicked
		if (evt.getButton() == evt.BUTTON3)
			if (radioArbol.isSelected()) {
				Ellipse2D elipse;
				for (Position<Character> pos : arbol.positions()) {
					TNode<Character> nodo = (TNode<Character>) pos;
					elipse = new Ellipse2D.Double(nodo.getCorner().getX(), nodo
							.getCorner().getY(), 48, 48);
					if (elipse.contains(evt.getPoint())) {
						clickDerecho.show(mpdArbol, evt.getPoint().x,
						evt.getPoint().y);
						break;
					}
				}
				mousePoint = evt.getPoint();
				mpdArbol.repaint();
			}
	}// GEN-LAST:event_mpdArbolMouseClicked

	private void mpdArbolMouseMoved(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_mpdArbolMouseMoved
		if (radioArbol.isSelected()) {
			drawSelected(evt.getPoint(), (Graphics2D) mpdArbol.getGraphics());
		}
	}// GEN-LAST:event_mpdArbolMouseMoved

	private void ctxDeleteNodeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ctxDeleteNodeActionPerformed
		Ellipse2D elipse;
		for (Position<Character> pos : arbol.positions()) {
			TNode<Character> nodo = (TNode<Character>) pos;
			elipse = new Ellipse2D.Double(nodo.getCorner().getX(), nodo
					.getCorner().getY(), 48, 48);
			if (elipse.contains(mousePoint)) {
				try {
					if (arbol.isRoot(pos))
						JOptionPane
								.showMessageDialog(
										null,
										"No se puede borrar la raiz. Intente crear un arbol nuevo.",
										"Error al borrar nodo",
										JOptionPane.ERROR_MESSAGE);
					else {
						TestingApplication.borrarNodo(pos);
						clickDerecho.setVisible(false);
						TestingApplication.calcularCentros(mpdArbol
								.getWidth(), new Point2D.Double(0, 20),
								(TNode<Character>) arbol.root());
						TestingApplication.actualizarMapeo();
						actualizarCombos();
						mpdArbol.repaint();
						mpdRecorrido.repaint();
						last_draw = null;
						last_char = null;
					}
					// TODO Revisar excepciones
				} catch (InvalidPositionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (EmptyTreeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}// GEN-LAST:event_ctxDeleteNodeActionPerformed

	private void ctxAddSonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ctxAddSonActionPerformed
		String response = JOptionPane.showInputDialog(null,
				"Rotulo de la raiz", "Ingrese el rotulo de la raiz",
				JOptionPane.QUESTION_MESSAGE);
		if (response != null) {
			Character para_agregar = response.charAt(0);
			if (!existeEnArbol(para_agregar)) {
				TestingApplication.agregarNodo(para_agregar, last_char);
				// TODO Revisar! Recalcula los centros de los nodos
				try {
					TestingApplication.calcularCentros(mpdArbol.getWidth(),
							new Point2D.Double(0, 20), (TNode<Character>) arbol
									.root());
				} catch (InvalidPositionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (EmptyTreeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				TestingApplication.actualizarMapeo();
				actualizarCombos();
				mpdArbol.repaint();
				mpdRecorrido.repaint();

			} else {
				JOptionPane.showMessageDialog(null,
						"El rotulo ingresado ya pertenece al arbol.", "Error",
						JOptionPane.ERROR_MESSAGE);
			}
		}
	}// GEN-LAST:event_ctxAddSonActionPerformed

	private void drawSelected(Point2D point, Graphics2D e) {
		if (arbol != null && !arbol.isEmpty()) {
			Ellipse2D elipse;
			boolean dibuje = false;
			// last_draw contiene la esquina del ultimo nodo dibujado
			// se utiliza para no volver a dibujar el nodo si todavia se
			// esta dentro de el
			if (last_draw != null) {
				elipse = new Ellipse2D.Double(last_draw.getX(), last_draw
						.getY(), 48, 48);
				if (elipse.contains(point))
					return;
				else
					clickDerecho.setVisible(false);

				dibujarNodo(green, last_draw, last_char.toString(), e);
			}
			try {
				for (Position<Character> pos : arbol.positions()) {
					TNode<Character> nodo = (TNode<Character>) pos;
					elipse = new Ellipse2D.Double(nodo.getCorner().getX(), nodo
							.getCorner().getY(), 48, 48);
					if (elipse.contains(point)) {
						String str = ((Integer) arbol.height(nodo)).toString();
						dibujarNodo(red, nodo.getCorner(), str, e);
						last_char = nodo.element();
						last_draw = nodo.getCorner();
						dibuje = true;
						break;
					}
				}
				if (!dibuje) {
					last_draw = null;
				}
			} catch (InvalidPositionException e1) {
				System.out.println("Esta excepcion no deberia dispararse.");
			}
		}
	}

	private void dibujarNodo(Image dibujo, Point2D corner, String texto,
			Graphics2D e) {
		e.drawImage(dibujo, (int) corner.getX(), (int) corner.getY(), null);
		e.setFont(new Font(e.getFont().toString(), Font.BOLD, 14));
		e.setColor(Color.white);
		e.drawString(texto, (int) (corner.getX() + 48 / 2 - 5), (int) (corner
				.getY() + 48 / 2 + 5));
	}

	private void cbAlturaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cbAlturaItemStateChanged
		if (cbAltura.getItemCount() != 0) {
			if ("comboBoxChanged".equals(evt.getActionCommand())) {
				lblAltura.setText("Altura: "
						+ TestingApplication.mapeo.get(
								(Character) cbAltura.getSelectedItem())
								.toString());
			}
		}
	}// GEN-LAST:event_cbAlturaItemStateChanged

	private void chkAncestroActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_chkAncestroActionPerformed
		mpdArbol.repaint();
	}// GEN-LAST:event_chkAncestroActionPerformed

	private void chkCaminoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_chkCaminoActionPerformed
		mpdArbol.repaint();
	}// GEN-LAST:event_chkCaminoActionPerformed

	private void radioArbolActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_radioArbolActionPerformed
		if (!radioArbol.isSelected()) {
			radioArbol.setSelected(true);
		} else {
			radioNiveles.setSelected(false);
			radioArbol.setSelected(true);
			mpdArbol.repaint();
		}

	}// GEN-LAST:event_radioArbolActionPerformed

	private void radioNivelesActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_radioNivelesActionPerformed
		if (!radioNiveles.isSelected()) {
			radioNiveles.setSelected(true);
		} else {
			radioArbol.setSelected(false);
			radioNiveles.setSelected(true);
			mpdArbol.repaint();
		}

	}// GEN-LAST:event_radioNivelesActionPerformed

	private void radioPosActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jRadioButton2ActionPerformed
		if (!radioPos.isSelected()) {
			radioPos.setSelected(true);
		} else {
			radioPos.setSelected(true);
			radioPre.setSelected(false);
			mpdRecorrido.repaint();
		}
	}// GEN-LAST:event_jRadioButton2ActionPerformed

	private void radioPreActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jRadioButton1ActionPerformed
		if (!radioPre.isSelected()) {
			radioPre.setSelected(true);
		} else {
			radioPre.setSelected(true);
			radioPos.setSelected(false);
			mpdRecorrido.repaint();
		}
	}// GEN-LAST:event_jRadioButton1ActionPerformed

	private void btnLoadTreeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnLoadTreeActionPerformed

		/*
		 * String response = JOptionPane.showInputDialog(null,
		 * "Rotulo de la raiz", "Ingrese el rotulo de la raiz",
		 * JOptionPane.QUESTION_MESSAGE); if (response != null) {
		 * TestingApplication.cargarArbol(response.charAt(0));
		 * btnLoadTree.setEnabled(false);
		 */
		// Agregado para prueba automatica
		// cbPadres.addItem(response.charAt(0));

		TestingApplication.cargarArbol('A');
		// FIXME ESTO TIENE QUE QDAR DESP DE CARGAR LA RAIZ
		arbol = TestingApplication.miArbol;
		// System.out.println(printPreOrder());
		TestingApplication.agregarNodo('B', 'A');
		TestingApplication.agregarNodo('C', 'B');
		TestingApplication.agregarNodo('D', 'A');
		TestingApplication.agregarNodo('E', 'A');
		TestingApplication.agregarNodo('F', 'E');
		TestingApplication.agregarNodo('G', 'E');
		niveles = 3;
		// cbNiveles.addItem(1);
		// **********************************

		txtRotulo.requestFocus();
		// TODO Revisar! Recalcula los centros de los nodos
		try {
			TestingApplication.calcularCentros(mpdArbol.getWidth(),
					new Point2D.Double(0, 20), (TNode<Character>) arbol.root());
		} catch (InvalidPositionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (EmptyTreeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		TestingApplication.actualizarMapeo();
		actualizarCombos();
		mpdArbol.repaint();
		mpdRecorrido.repaint();
		// }
	}// GEN-LAST:event_btnLoadTreeActionPerformed

	private void btnAddNodeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnAddNodeActionPerformed
		if (!existeEnArbol(txtRotulo.getText().charAt(0))) {
			// TODO CAMBIAR CHARAT 0
			// FIXME DISPARA EXCEPCION CON EN CASILLERO VACIO
			if (!txtRotulo.getText().equals("")) {
				Character nuevo = txtRotulo.getText().charAt(0);

				TestingApplication.agregarNodo(nuevo, (Character) cbPadres
						.getSelectedItem());
				// TODO Revisar! Recalcula los centros de los nodos
				try {
					TestingApplication.calcularCentros(mpdArbol.getWidth(),
							new Point2D.Double(0, 20), (TNode<Character>) arbol
									.root());
				} catch (InvalidPositionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (EmptyTreeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				TestingApplication.actualizarMapeo();
				actualizarCombos();
				cbPadres.setSelectedItem(nuevo);
				txtRotulo.setText("");
				mpdArbol.repaint();
				mpdRecorrido.repaint();
			}
		} else {
			JOptionPane.showMessageDialog(null,
					"El rotulo ingresado ya pertenece al arbol.", "Error",
					JOptionPane.ERROR_MESSAGE);
		}
	}// GEN-LAST:event_btnAddNodeActionPerformed

	private boolean existeEnArbol(Character caracter) {
		for (Position<Character> pos : arbol.positions())
			if (pos.element().equals(caracter))
				return true;
		return false;
	}

	private void btnDeleteLevelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnDeleteLevelActionPerformed
		try {
			pila_a_pintar = TestingApplication
					.eliminarNivel((Integer) cbNiveles.getSelectedItem());
			// TODO Revisar! Recalcula los centros de los nodos
			TestingApplication.calcularCentros(mpdArbol.getWidth(),
					new Point2D.Double(0, 20), (TNode<Character>) arbol.root());
			actualizarCombos();
			mpdArbol.repaint();
			mpdRecorrido.repaint();
			TestingApplication.actualizarMapeo();
			VentanaPila ventana = new VentanaPila(this) {

				public void paint(Graphics e) {
					e.drawImage(background, 0, 0, null);
				}
			};
			ventana.setTitle("Elementos eliminados");
			ventana.setVisible(true);
		} catch (EmptyTreeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidLevelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidPositionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}// GEN-LAST:event_btnDeleteLevelActionPerformed

	private void actualizarCombos() {
		// TODO Auto-generated method stub
		cbNiveles.removeAllItems();
		int cantNiveles = arbol.contarNiveles();
		for (int i = 2; i <= cantNiveles; i++) {
			cbNiveles.addItem(i);
		}
		niveles = cantNiveles;
		cbPadres.removeAllItems();
		cbAltura.removeAllItems();
		cbHasta.removeAllItems();
		cbDesde.removeAllItems();
		for (Position<Character> pos : arbol.positions()) {
			cbPadres.addItem(pos.element());
			cbAltura.addItem(pos.element());
			cbHasta.addItem(pos.element());
			cbDesde.addItem(pos.element());
		}
	}

	public void graficarPila(Graphics2D e) {
		e.drawImage(background2, 0, 0, null);
		if (pila_a_pintar != null) {
			try {
				pila_temp = new Pila<Character>();
				Dimension2D size = new Dimension(48, 48);
				int dist_nodos = 56;
				int i = 0; // indice de nodo actual para el for
				int margen_derecho = 20, margen_superior = 20;

				while (!pila_a_pintar.isEmpty()) {
					Character rotulo = pila_a_pintar.pop();
					pila_temp.push(rotulo);
					Point2D loc = new Point2D.Double(margen_derecho,
							margen_superior + dist_nodos * i);
					i++;
					e.drawImage(yellow, (int) loc.getX(), (int) loc.getY(),
							null);

					e.setFont(new Font(e.getFont().toString(), Font.BOLD, 14));

					e.setColor(Color.white);

					e.drawString(rotulo.toString(), (int) (loc.getX()
							+ size.getWidth() / 2 - 5), (int) (loc.getY()
							+ size.getHeight() / 2 + 5));
				}
				if (i * dist_nodos + margen_derecho > getHeight()) {
					setSize(getWidth(), i * dist_nodos + margen_superior);
				}

				while (!pila_temp.isEmpty()) {
					pila_a_pintar.push(pila_temp.pop());
				}
			} catch (EmptyStackException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}

	}

	public void graficarRecorrido(Graphics2D e) {
		e.drawImage(background2, 0, 0, null);
		if (arbol != null && !arbol.isEmpty()) {
			Dimension2D size = new Dimension(48, 48);
			PositionList<Position<Character>> lista;
			if (radioPre.isSelected()) {
				lista = (PositionList<Position<Character>>) arbol
						.preOrderPositions();
			} else {
				lista = (PositionList<Position<Character>>) arbol
						.posOrderPositions();
			}

			// distancia entre los dibujos de los nodos para que entren las
			// flechas
			int dist_nodos = 96;
			int i = 0; // indice de nodo actual para el for
			int margen_derecho = 20, margen_superior = 17;
			for (Position<Character> pos : lista) {
				Point2D loc = new Point2D.Double(margen_derecho + dist_nodos
						* i, margen_superior);
				i++;
				// crear variables para reducir calculos
				e.drawImage(green, (int) loc.getX(), (int) loc.getY(), null);
				if (i != lista.size()) {
					e.drawImage(flecha, (int) loc.getX()
							+ (int) size.getWidth() + 12,
							(int) loc.getY() + 12, null);
				}
				e.setFont(new Font(e.getFont().toString(), Font.BOLD, 14));
				e.setColor(Color.white);
				e.drawString(pos.element().toString(), (int) (loc.getX()
						+ size.getWidth() / 2 - 5), (int) (loc.getY()
						+ size.getHeight() / 2 + 5));
			}
			if (i * dist_nodos + margen_derecho > mpdRecorrido.getWidth()) {
				mpdRecorrido.setSize(i * dist_nodos + margen_derecho, mpdRecorrido.getHeight());
			}
		}
	}

	public void graficarArbol(Graphics2D e) {
		// TODO PRESTAR ATENCION CDO SE CAMBIEN LOS STATIC DE TESTING APP
		e.drawImage(background2, 0, 0, null);
		if (arbol != null) {
			if (niveles > 4)
				mpdArbol.setSize(mpdArbol.getWidth(), niveles * 100 + 20);
			Dimension2D size = new Dimension(48, 48);
			try {
				Line2D arco;
				// TODO REDUCIR A UN FOR
				// Se dibujan los arcos y luego se superponen los circulos
				Point2D centropadre;
				Point2D centro;
				TNode<Character> nodo, padre;
				for (Position<Character> pos : arbol.positions()) {
					nodo = (TNode<Character>) pos;
					padre = nodo.getParent();
					if (!arbol.isRoot(pos)) {
						arco = new Line2D.Double();
						centro = new Point2D.Double(nodo.getCorner().getX()
								+ size.getWidth() / 2, nodo.getCorner().getY()
								+ size.getHeight() / 2);
						centropadre = new Point2D.Double(padre.getCorner()
								.getX()
								+ size.getWidth() / 2, padre.getCorner().getY()
								+ size.getHeight() / 2);
						e.setColor(Color.black);
						e.setStroke(new BasicStroke(5));
						arco.setLine(centro, centropadre);
						e.draw(arco);
					}
				}
				for (Position<Character> pos : arbol.positions()) {
					nodo = (TNode<Character>) pos;
					e.drawImage(green, (int) nodo.getCorner().getX(),
							(int) nodo.getCorner().getY(), null);
					e.setFont(new Font(e.getFont().toString(), Font.BOLD, 14));
					e.setColor(Color.white);
					e.drawString(nodo.element().toString(), (int) (nodo
							.getCorner().getX()
							+ size.getWidth() / 2 - 5), (int) (nodo.getCorner()
							.getY()
							+ size.getHeight() / 2 + 5));
				}

			} catch (InvalidPositionException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			if (chkAncestro.isSelected()) {
				resaltarAncestro(e);
			}
			if (chkCamino.isSelected()) {
				resaltarCamino(e);
			}

		}
	}

	private void resaltarCamino(Graphics2D e) {
		Lista<Character> lista;
		Dimension2D size = new Dimension(48, 48);
		try {
			lista = TestingApplication.route((Character) cbDesde
					.getSelectedItem(), (Character) cbHasta.getSelectedItem());
			Line2D arco;
			Point2D centropadre;
			Point2D centro;
			Position<Character> pos = lista.first();
			boolean salir = false;
			while (!salir) {
				boolean last = pos == lista.last();
				TNode<Character> nodo = (TNode<Character>) arbol.findNodo(pos
						.element());
				if (!last) {
					TNode<Character> siguiente = (TNode<Character>) arbol
							.findNodo(lista.next(pos).element());
					// supone que si el siguiente es el padre entonces pertenece
					// a
					// la lista
					arco = new Line2D.Double();
					centro = new Point2D.Double(nodo.getCorner().getX()
							+ size.getWidth() / 2, nodo.getCorner().getY()
							+ size.getHeight() / 2);
					centropadre = new Point2D.Double(siguiente.getCorner()
							.getX()
							+ size.getWidth() / 2, siguiente.getCorner().getY()
							+ size.getHeight() / 2);
					e.setColor(Color.red);
					e.setStroke(new BasicStroke(5));
					arco.setLine(centro, centropadre);
					e.draw(arco);
				}
				e.setColor(Color.white);
				e.drawImage(blue, (int) nodo.getCorner().getX(), (int) nodo
						.getCorner().getY(), null);
				e.drawString(nodo.element().toString(), (int) (nodo.getCorner()
						.getX()
						+ size.getWidth() / 2 - 5), (int) (nodo.getCorner()
						.getY()
						+ size.getHeight() / 2 + 5));
				if (!last) {
					pos = lista.next(pos);
				} else {
					salir = true;
				}
			}
		} catch (InvalidPositionException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (EmptyTreeException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (EmptyListException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (BoundaryViolationException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	private void resaltarAncestro(Graphics2D e) {
		Dimension2D size = new Dimension(48, 48);
		TNode<Character> nodo;
		try {
			nodo = (TNode<Character>) arbol.findNodo(TestingApplication
					.ancestroComun((Character) cbDesde.getSelectedItem(),
							(Character) cbHasta.getSelectedItem()));

			e.setColor(Color.white);
			e.drawImage(orange, (int) nodo.getCorner().getX(), (int) nodo
					.getCorner().getY(), null);
			e.drawString(nodo.element().toString(), (int) (nodo.getCorner()
					.getX()
					+ size.getWidth() / 2 - 5), (int) (nodo.getCorner().getY()
					+ size.getHeight() / 2 + 5));
		} catch (InvalidPositionException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (EmptyTreeException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

	}

	public void graficarNiveles(Graphics2D e) {
		if (arbol != null) {
			int nivel = 1;
			int renglon = 56, margentxt = 20;
			int index = 0;
			int anchotxt = 100;
			e.setFont(new Font(e.getFont().toString(), Font.BOLD, 20));
			for (Position<Character> pos : arbol.listadoNiveles().positions()) {
				if (nivel == 1) {
					e.setColor(Color.black);
					e
							.drawImage(green, margentxt + anchotxt,
									renglon - 32, null);
					e.drawString("Nivel 1:", margentxt, renglon);
					e.setColor(Color.white);
					e.drawString(pos.element().toString(), margentxt + anchotxt
							+ 16, renglon);
					nivel++;
				} else if (pos.element() == null) {
					Point2D txtLoc = new Point2D.Double(20, renglon * nivel);
					e.setColor(Color.black);
					e.drawString("Nivel " + nivel + ":", (int) txtLoc.getX(),
							(int) txtLoc.getY());
					nivel++;
					index = 0;
				} else {
					int locX = anchotxt + margentxt + index * 56, locY = renglon
							* (nivel - 1);
					e.drawImage(green, locX, locY - 32, null);
					e.setColor(Color.white);
					e.drawString(pos.element().toString(), locX + 16, locY);
					index++;
				}

			}
		}

	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNode;
    private javax.swing.JButton btnDeleteLevel;
    private javax.swing.JButton btnEliminarArbol;
    private javax.swing.JButton btnLoadTree;
    private javax.swing.JComboBox cbAltura;
    private javax.swing.JComboBox cbDesde;
    private javax.swing.JComboBox cbHasta;
    private javax.swing.JComboBox cbNiveles;
    private javax.swing.JComboBox cbPadres;
    private javax.swing.JCheckBox chkAncestro;
    private javax.swing.JCheckBox chkCamino;
    private javax.swing.JPopupMenu clickDerecho;
    private javax.swing.JMenuItem ctxAddSon;
    private javax.swing.JMenuItem ctxDeleteNode;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JLabel lblAltura;
    private javax.swing.JLabel lblDesde;
    private javax.swing.JLabel lblHasta;
    private javax.swing.JLabel lblNivel;
    private javax.swing.JLabel lblPadre;
    private javax.swing.JLabel lblRotulo;
    private javax.swing.JPanel mpdArbol;
    private javax.swing.JPanel mpdRecorrido;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelAncCam;
    private javax.swing.JPanel panelArbol;
    private javax.swing.JPanel panelDeFondo;
    private javax.swing.JPanel panelEliminar;
    private javax.swing.JPanel panelGraficos;
    private javax.swing.JPanel panelMostrarAC;
    private javax.swing.JPanel panelOperaciones;
    private javax.swing.JPanel panelRecorridos;
    private javax.swing.JPanel panelTipoRecorrido;
    private javax.swing.JRadioButton radioArbol;
    private javax.swing.JRadioButton radioNiveles;
    private javax.swing.JRadioButton radioPos;
    private javax.swing.JRadioButton radioPre;
    private javax.swing.JScrollPane scrollArbol;
    private javax.swing.JScrollPane scrollRecorrido;
    private javax.swing.JTextField txtRotulo;
    // End of variables declaration//GEN-END:variables
	private static Image green, black, orange, blue, gray, yellow, red, flecha,
			background, background2;
	private Pila<Character> pila_temp;
	private Pila<Character> pila_a_pintar;
	private static Arbol<Character> arbol;
	private Point2D last_draw;
	private Character last_char;
	private Point2D mousePoint;
	private int niveles;
}
